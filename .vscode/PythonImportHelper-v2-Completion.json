[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "Blog",
        "importPath": "blogs.models",
        "description": "blogs.models",
        "isExtraImport": true,
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "blogs.models",
        "description": "blogs.models",
        "isExtraImport": true,
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "blogs.models",
        "description": "blogs.models",
        "isExtraImport": true,
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "Blog",
        "importPath": "blogs.models",
        "description": "blogs.models",
        "isExtraImport": true,
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "blogs.models",
        "description": "blogs.models",
        "isExtraImport": true,
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "Blog",
        "importPath": "blogs.models",
        "description": "blogs.models",
        "isExtraImport": true,
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "blogs.models",
        "description": "blogs.models",
        "isExtraImport": true,
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "Blog",
        "importPath": "blogs.models",
        "description": "blogs.models",
        "isExtraImport": true,
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "blogs.models",
        "description": "blogs.models",
        "isExtraImport": true,
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "Blog",
        "importPath": "blogs.models",
        "description": "blogs.models",
        "isExtraImport": true,
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "blogs.models",
        "description": "blogs.models",
        "isExtraImport": true,
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "blogs.models",
        "description": "blogs.models",
        "isExtraImport": true,
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "mod",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "unique",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "verbose",
        "importPath": "tabnanny",
        "description": "tabnanny",
        "isExtraImport": true,
        "detail": "tabnanny",
        "documentation": {}
    },
    {
        "label": "mode",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "title",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "category",
        "importPath": "unicodedata",
        "description": "unicodedata",
        "isExtraImport": true,
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "single_blog",
        "importPath": "blogs.views",
        "description": "blogs.views",
        "isExtraImport": true,
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "search",
        "importPath": "blogs.views",
        "description": "blogs.views",
        "isExtraImport": true,
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "post",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "importPath": "blog_site.forms",
        "description": "blog_site.forms",
        "isExtraImport": true,
        "detail": "blog_site.forms",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "CategoryForm",
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "isExtraImport": true,
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "BlogForm",
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "isExtraImport": true,
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "AddUserForm",
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "isExtraImport": true,
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "EditUserForm",
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "isExtraImport": true,
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.template.defaultfilters",
        "description": "django.template.defaultfilters",
        "isExtraImport": true,
        "detail": "django.template.defaultfilters",
        "documentation": {}
    },
    {
        "label": "classname",
        "importPath": "pydoc",
        "description": "pydoc",
        "isExtraImport": true,
        "detail": "pydoc",
        "documentation": {}
    },
    {
        "label": "S",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "About",
        "importPath": "settingapp.models",
        "description": "settingapp.models",
        "isExtraImport": true,
        "detail": "settingapp.models",
        "documentation": {}
    },
    {
        "label": "Social_links",
        "importPath": "settingapp.models",
        "description": "settingapp.models",
        "isExtraImport": true,
        "detail": "settingapp.models",
        "documentation": {}
    },
    {
        "label": "Social_links",
        "importPath": "settingapp.models",
        "description": "settingapp.models",
        "isExtraImport": true,
        "detail": "settingapp.models",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blogs.migrations.0001_initial",
        "description": "blogs.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "blogs.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blogs.migrations.0002_alter_category_options_blog",
        "description": "blogs.migrations.0002_alter_category_options_blog",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('blogs', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='category',\n            options={'verbose_name': 'Category', 'verbose_name_plural': 'Categories'},\n        ),",
        "detail": "blogs.migrations.0002_alter_category_options_blog",
        "documentation": {}
    },
    {
        "label": "BlogAdmin",
        "kind": 6,
        "importPath": "blogs.admin",
        "description": "blogs.admin",
        "peekOfCode": "class BlogAdmin(admin.ModelAdmin):\n    prepopulated_fields = {\"slug\": ('title',)}\n    list_display = ('id','title', 'status', 'is_featured', 'created_at')\n    list_editable = ('is_featured','status', 'title')\n    search_fields = ()\nadmin.site.register(Category)\nadmin.site.register(Blog, BlogAdmin)",
        "detail": "blogs.admin",
        "documentation": {}
    },
    {
        "label": "BlogsConfig",
        "kind": 6,
        "importPath": "blogs.apps",
        "description": "blogs.apps",
        "peekOfCode": "class BlogsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'blogs'",
        "detail": "blogs.apps",
        "documentation": {}
    },
    {
        "label": "get_categories",
        "kind": 2,
        "importPath": "blogs.context_processor",
        "description": "blogs.context_processor",
        "peekOfCode": "def get_categories(request):\n    categories = Category.objects.all()\n    return {'categories':categories}",
        "detail": "blogs.context_processor",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "blogs.models",
        "description": "blogs.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(max_length=100)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self) -> str:\n        return self.name\n    class Meta:\n        verbose_name_plural=\"Categories\"\n        verbose_name=\"Category\"\nSTATUS_CHOICES = (",
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "Blog",
        "kind": 6,
        "importPath": "blogs.models",
        "description": "blogs.models",
        "peekOfCode": "class Blog(models.Model):\n    title = models.CharField(max_length=200)\n    slug = models.SlugField(unique=True, null=False)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)\n    author = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)\n    featured_image = models.ImageField(upload_to='uploads/%Y/%m/%d')\n    short_description = models.CharField(max_length=200)\n    body = models.TextField(max_length=2000)\n    status = models.IntegerField(choices=STATUS_CHOICES, default=0)\n    is_featured = models.BooleanField(default=False)",
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "STATUS_CHOICES",
        "kind": 5,
        "importPath": "blogs.models",
        "description": "blogs.models",
        "peekOfCode": "STATUS_CHOICES = (\n    (0, \"Draft\"),\n    (1, \"Published\")\n)\nclass Blog(models.Model):\n    title = models.CharField(max_length=200)\n    slug = models.SlugField(unique=True, null=False)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)\n    author = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)\n    featured_image = models.ImageField(upload_to='uploads/%Y/%m/%d')",
        "detail": "blogs.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "blogs.urls",
        "description": "blogs.urls",
        "peekOfCode": "urlpatterns = [\n    path('<int:category_id>/',posts_by_category,name='posts_by_category')\n]",
        "detail": "blogs.urls",
        "documentation": {}
    },
    {
        "label": "posts_by_category",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def posts_by_category(request, category_id):\n    posts = Blog.objects.filter(category=category_id,status=1)\n    # category = Category.objects.get(pk=category_id)\n    category = get_object_or_404(Category,pk=category_id)\n    context = {\n        \"posts\": posts,\n        'category':category\n    }\n    print(f\"category_id\", category_id)\n    return render(request, \"posts_by_category.html\", context)",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "single_blog",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def single_blog(request,link):\n    blog = get_object_or_404(Blog,slug=link)\n    context = {\n        'blog':blog\n    }\n    return render(request,'single-blog.html',context)\ndef search(request):\n    keyword = request.GET.get('keyword','')\n    blogs = Blog.objects.filter(Q(title__icontains=keyword) | Q(body__icontains=keyword))\n    context = {",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "blogs.views",
        "description": "blogs.views",
        "peekOfCode": "def search(request):\n    keyword = request.GET.get('keyword','')\n    blogs = Blog.objects.filter(Q(title__icontains=keyword) | Q(body__icontains=keyword))\n    context = {\n        'posts':blogs,\n        'keyword':keyword\n    }\n    print(blogs)\n    return render(request,'search.html',context)",
        "detail": "blogs.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "blog_site.asgi",
        "description": "blog_site.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "blog_site.asgi",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "kind": 6,
        "importPath": "blog_site.forms",
        "description": "blog_site.forms",
        "peekOfCode": "class RegistrationForm(UserCreationForm):\n    class Meta:\n        model = User\n        fields = ('email','username','password1','password2')",
        "detail": "blog_site.forms",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-+ya&yfmathkj(w6$wd*z-(=_errz@gmaq_=5s^2mqj_=(!zzs)'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-+ya&yfmathkj(w6$wd*z-(=_errz@gmaq_=5s^2mqj_=(!zzs)'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blogs',",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blogs',\n    'settingapp',\n    'crispy_forms',",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'blog_site.urls'",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "ROOT_URLCONF = 'blog_site.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            'template'\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            'template'\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "WSGI_APPLICATION = 'blog_site.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\nSTATICFILES_DIRS = [\n    'blog_site/static'",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\nSTATICFILES_DIRS = [\n    'blog_site/static'\n]",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\nSTATICFILES_DIRS = [\n    'blog_site/static'\n]\nMEDIA_URL = 'media/'",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\nSTATICFILES_DIRS = [\n    'blog_site/static'\n]\nMEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\nSTATICFILES_DIRS = [\n    'blog_site/static'\n]\nMEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'static')\nSTATICFILES_DIRS = [\n    'blog_site/static'\n]\nMEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCRISPY_TEMPLATE_PACK = 'bootstrap5'",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    'blog_site/static'\n]\nMEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCRISPY_TEMPLATE_PACK = 'bootstrap5'",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "MEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCRISPY_TEMPLATE_PACK = 'bootstrap5'",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCRISPY_TEMPLATE_PACK = 'bootstrap5'",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCRISPY_TEMPLATE_PACK = 'bootstrap5'",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "blog_site.settings",
        "description": "blog_site.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = 'bootstrap5'",
        "detail": "blog_site.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "blog_site.urls",
        "description": "blog_site.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', home, name='home'),\n    path('blogs/<slug:link>/',single_blog,name='single_blog'),\n    path('category/',include('blogs.urls')),\n    path('search/',search,name='search'),\n    path('register/',register,name=\"register\"),\n    path('login/',login,name='login'),\n    path('logout/',logout,name='logout'),\n    path('dashboard/',include('dashboard.urls')),",
        "detail": "blog_site.urls",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "blog_site.views",
        "description": "blog_site.views",
        "peekOfCode": "def home(request):\n    posts = Blog.objects.filter(is_featured=True,status=1)\n    blogs = Blog.objects.filter(is_featured=False,status=1)\n    # categories = Category.objects.all()\n    context = {\n        # 'categories':categories,\n        'posts':posts,\n        'blogs':blogs\n    }\n    return render(request, \"home.html\",context)",
        "detail": "blog_site.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "blog_site.views",
        "description": "blog_site.views",
        "peekOfCode": "def register(request):\n    if request.method == \"POST\":\n        print(request.POST)\n        form = RegistrationForm(request.POST)\n        if form.is_valid():\n            form.save()\n        else:\n            print(form.errors)\n        return redirect('register')\n    else:",
        "detail": "blog_site.views",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "blog_site.views",
        "description": "blog_site.views",
        "peekOfCode": "def login(request):\n    if request.method == \"GET\":\n        form = AuthenticationForm()\n        context = {\n            \"form\":form\n        }\n        return render(request,\"login.html\",context)\n    elif request.method == \"POST\":\n        form = AuthenticationForm(request,request.POST)\n        if form.is_valid():",
        "detail": "blog_site.views",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "blog_site.views",
        "description": "blog_site.views",
        "peekOfCode": "def logout(request):\n    auth.logout(request)\n    return redirect('home')",
        "detail": "blog_site.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "blog_site.wsgi",
        "description": "blog_site.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "blog_site.wsgi",
        "documentation": {}
    },
    {
        "label": "DashboardConfig",
        "kind": 6,
        "importPath": "dashboard.apps",
        "description": "dashboard.apps",
        "peekOfCode": "class DashboardConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'dashboard'",
        "detail": "dashboard.apps",
        "documentation": {}
    },
    {
        "label": "CategoryForm",
        "kind": 6,
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "peekOfCode": "class CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category  # Bu yerda modelingizni belgilash\n        fields = '__all__'\nclass BlogForm(forms.ModelForm):\n    class Meta:\n        model = Blog  # Bu yerda modelingizni belgilash\n        fields = ('title','category','featured_image','short_description','body','status','is_featured')\nclass AddUserForm(UserCreationForm):\n    class Meta:",
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "BlogForm",
        "kind": 6,
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "peekOfCode": "class BlogForm(forms.ModelForm):\n    class Meta:\n        model = Blog  # Bu yerda modelingizni belgilash\n        fields = ('title','category','featured_image','short_description','body','status','is_featured')\nclass AddUserForm(UserCreationForm):\n    class Meta:\n        model = User\n        fields = ('username','email','first_name','last_name','is_staff','is_active','is_superuser','groups','user_permissions')\nclass EditUserForm(forms.ModelForm ):\n    class Meta:",
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "AddUserForm",
        "kind": 6,
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "peekOfCode": "class AddUserForm(UserCreationForm):\n    class Meta:\n        model = User\n        fields = ('username','email','first_name','last_name','is_staff','is_active','is_superuser','groups','user_permissions')\nclass EditUserForm(forms.ModelForm ):\n    class Meta:\n        model = User\n        fields = ('username','email','first_name','last_name','is_staff','is_active','is_superuser','groups','user_permissions')",
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "EditUserForm",
        "kind": 6,
        "importPath": "dashboard.forms",
        "description": "dashboard.forms",
        "peekOfCode": "class EditUserForm(forms.ModelForm ):\n    class Meta:\n        model = User\n        fields = ('username','email','first_name','last_name','is_staff','is_active','is_superuser','groups','user_permissions')",
        "detail": "dashboard.forms",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "dashboard.urls",
        "description": "dashboard.urls",
        "peekOfCode": "urlpatterns = [\n    path('',dashboard,name='dashboard'),\n    path('categories/',categories,name='categories'),\n    path('categories/add/',add_category,name='add_category'),\n    path('categories/edit/<int:pk>/',edit_category,name='edit_category'),\n    path('categories/delete/<int:id>/',delete_category,name='delete_category'),\n    path('blogs/',blogs,name='blogs'),\n    path('blogs/add/',add_blogs,name='add_blogs'),\n    path('blogs/edit/<int:pk>/',edit_blogs,name='edit_blogs'),\n    path('blogs/delete/<int:id>/',delete_blog,name='delete_blog'),",
        "detail": "dashboard.urls",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def dashboard(request):\n    blog_count = Blog.objects.all().count()\n    category_count = Category.objects.all().count()\n    context = {\n        'blog_count':blog_count,\n        'category_count':category_count\n    }\n    return render(request,'dashboard/dashboard.html',context)\ndef categories(request):\n    return render(request,'dashboard/categories.html')",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "categories",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def categories(request):\n    return render(request,'dashboard/categories.html')\ndef add_category(request):\n    if request.method == \"POST\":\n        form = CategoryForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('categories')\n    else:\n        form = CategoryForm()",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "add_category",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def add_category(request):\n    if request.method == \"POST\":\n        form = CategoryForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('categories')\n    else:\n        form = CategoryForm()\n    context = {\n        'form':form",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "edit_category",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def edit_category(request,pk):\n    category = get_object_or_404(Category,pk=pk)\n    if request.method ==\"GET\":\n        form = CategoryForm(instance=category)\n        context = {\n            'form':form,\n            'category':category\n        }\n        return render(request,'dashboard/edit_category.html',context)\n    elif request.method == \"POST\":",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "delete_category",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def delete_category(request,id):\n    del_category = get_object_or_404(Category,id=id)\n    del_category.delete()\n    return redirect('categories')\ndef blogs(request):\n    blogs = Blog.objects.all()\n    context = {\n        \"blogs\": blogs\n    }\n    return render(request,'dashboard/blogs.html',context)",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "blogs",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def blogs(request):\n    blogs = Blog.objects.all()\n    context = {\n        \"blogs\": blogs\n    }\n    return render(request,'dashboard/blogs.html',context)\ndef add_blogs(request):\n    if request.method == \"GET\":\n        form = BlogForm()\n        context = {",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "add_blogs",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def add_blogs(request):\n    if request.method == \"GET\":\n        form = BlogForm()\n        context = {\n            'form':form\n        }\n        return render(request,'dashboard/add_blogs.html',context)\n    elif request.method == \"POST\":\n        form = BlogForm(request.POST,request.FILES)\n        if form.is_valid():",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "edit_blogs",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def edit_blogs(request,pk):\n    blog = get_object_or_404(Blog,pk=pk)\n    if request.method ==\"GET\":\n        form = BlogForm(instance=blog)\n        context = {\n            'form':form,\n            'blog':blog\n        }\n        return render(request,'dashboard/edit_blogs.html',context)\n    elif request.method == \"POST\":",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "delete_blog",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def delete_blog(request,id):\n    delete_blog = get_object_or_404(Blog,id=id)\n    delete_blog.delete()\n    return redirect(\"blogs\")\ndef users(request):\n    users = User.objects.all()\n    context = {\n        \"users\":users\n    }\n    return render(request,'dashboard/users.html',context)",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def users(request):\n    users = User.objects.all()\n    context = {\n        \"users\":users\n    }\n    return render(request,'dashboard/users.html',context)\ndef add_user(request):\n    if request.method == \"GET\":\n        form = AddUserForm()\n        return render(request,'dashboard/add_user.html',{\"form\":form})",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "add_user",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def add_user(request):\n    if request.method == \"GET\":\n        form = AddUserForm()\n        return render(request,'dashboard/add_user.html',{\"form\":form})\n    elif request.method == \"POST\":\n        form = AddUserForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect(\"users\")\n        else:",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "edit_user",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def edit_user(request,pk):\n    user = get_object_or_404(User,pk=pk)\n    if request.method == \"GET\":\n        form = EditUserForm(instance=user)\n        context = {\n            \"form\":form,\n            \"user\":user\n        }\n        return render(request,'dashboard/edit_user.html',context)\n    elif request.method == \"POST\":",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def delete_user(request,id):\n    del_user = get_object_or_404(User,id=id)\n    del_user.delete()\n    return redirect('users')",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "settingapp.migrations.0001_initial",
        "description": "settingapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='About',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=300)),",
        "detail": "settingapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AboutAdmin",
        "kind": 6,
        "importPath": "settingapp.admin",
        "description": "settingapp.admin",
        "peekOfCode": "class AboutAdmin(admin.ModelAdmin):\n    def has_add_permission(self, request: HttpRequest) -> bool:\n        return About.objects.all().count() == 0\n# Register your models here.\nadmin.site.register(About,AboutAdmin)\nadmin.site.register(Social_links)",
        "detail": "settingapp.admin",
        "documentation": {}
    },
    {
        "label": "SettingappConfig",
        "kind": 6,
        "importPath": "settingapp.apps",
        "description": "settingapp.apps",
        "peekOfCode": "class SettingappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'settingapp'",
        "detail": "settingapp.apps",
        "documentation": {}
    },
    {
        "label": "get_social_links",
        "kind": 2,
        "importPath": "settingapp.context_processor",
        "description": "settingapp.context_processor",
        "peekOfCode": "def get_social_links(request):\n    social_links = Social_links.objects.all()\n    return {'social_links':social_links}",
        "detail": "settingapp.context_processor",
        "documentation": {}
    },
    {
        "label": "About",
        "kind": 6,
        "importPath": "settingapp.models",
        "description": "settingapp.models",
        "peekOfCode": "class About(models.Model):\n    title = models.CharField(max_length=300 )\n    discription = models.CharField(max_length=500)\n    def __str__(self) -> str:\n        return self.title\nclass Social_links(models.Model):\n    name = models.CharField(max_length=100)\n    link = models.URLField(unique=True )\n    def __str__(self) -> str:\n        return self.name",
        "detail": "settingapp.models",
        "documentation": {}
    },
    {
        "label": "Social_links",
        "kind": 6,
        "importPath": "settingapp.models",
        "description": "settingapp.models",
        "peekOfCode": "class Social_links(models.Model):\n    name = models.CharField(max_length=100)\n    link = models.URLField(unique=True )\n    def __str__(self) -> str:\n        return self.name",
        "detail": "settingapp.models",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_site.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]